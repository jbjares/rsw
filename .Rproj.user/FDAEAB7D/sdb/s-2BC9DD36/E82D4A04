{
    "contents" : "\nplayCollectionVar <- \"soundwave.Play\"\nhostDesenv <- \"127.0.0.1\"\nusernameDesenv <-\"\"\npasswordDesenv <- \"\"\ndbDesenv = \"sifem\"\n\n\n\n\nmongoHelper <- list(\n  \n  library(rmongodb), \n  connect = function(){\n    mongo <- mongo.create(host = hostDesenv, username = usernameDesenv, password = passwordDesenv, db = dbDesenv, timeout = 0L)\n    return(mongo)\n  },\n  \n  findOneCache = function(xName,yName,zName=NULL,projectName=projectNameVar,simulationName=simulationNameVar,conn=mongo,dataSetCache=dataSetCacheSchemaVar){\n    \n    \n    if(xName==\"Select\"){\n      print(\"You must select at least Y and Z to show 2D view.\")\n      return(NULL)\n    }\n    if(yName==\"Select\"){\n      print(\"You must select at least Y and Z to show 2D view.\")\n      return(NULL)\n    }\n    \n    \n    buf <- mongo.bson.buffer.create()\n    if(!is.null(projectName) && projectName!=\"\"){\n      projectName <- projectNameVar;\n      mongo.bson.buffer.append(buf, \"projectName\",projectName)\n    }\n    if(!is.null(simulationName) && simulationName!=\"\"){\n      simulationName <- simulationNameVar;\n      mongo.bson.buffer.append(buf, \"simulationName\",simulationName)\n    }\n    \n    mongo.bson.buffer.append(buf, \"xName\", xName)\n    mongo.bson.buffer.append(buf, \"yName\", yName)\n    if(!is.null(zName) && zName!=\"\" && zName!=\"Select\"){\n      mongo.bson.buffer.append(buf, \"zName\", zName)\n    }\n    if(is.null(zName) || zName==\"Select\"){\n      print(\"Try select Z option to show 3D view.\")\n    }\n    \n    \n    \n    query <- mongo.bson.from.buffer(buf)\n    yAndYQueryReturn <- mongo.find.one(conn,dataSetCache,query)\n    \n    print(paste0(\"before map\"))\n    \n    print(paste0(\"class(yAndYQueryReturn)==mongo.bson: \",class(yAndYQueryReturn)==\"mongo.bson\"))\n    print(paste0(\"class(yAndYQueryReturn): \",class(yAndYQueryReturn)))\n    print(paste0(\"xName: \",xName))\n    print(paste0(\"yName: \",yName))\n    print(paste0(\"zName: \",zName))\n    print(paste0(\"projectName: \",projectName))\n    print(paste0(\"simulationName: \",simulationName))\n    print(paste0(\"dataSetCache: \",dataSetCache))\n    \n    \n    \n    if(class(yAndYQueryReturn)!=\"mongo.bson\"){\n      print(paste0(\"into map\"))\n      #if query based on x and y names doesn't retreives anything, try the query based on project and simulation name\n      #browser()\n      buf <- NULL\n      query <- NULL\n      buf <- mongo.bson.buffer.create()\n      mongo.bson.buffer.append(buf, \"projectName\",projectNameVar)\n      mongo.bson.buffer.append(buf, \"xName\",NULL)\n      mongo.bson.buffer.append(buf, \"yName\",NULL)\n      \n      query <- mongo.bson.from.buffer(buf)\n      tmp <- mongo.find.one(conn,dataSetCache,query)\n      tmpList <- mongo.bson.to.list(tmp)[\"viewTO\"]\n      viewTOList <- tmpList$viewTO\n      \n      if(length(viewTOList$xView)>0){\n        print(\"Data set is not properly well defined. Try contact the system admin, and ask about code [ERR0001]\")\n        return(NULL)\n      }\n      if(length(viewTOList$yView)>0){\n        print(\"Data set is not properly well defined. Try contact the system admin, and ask about code [ERR0002]\")\n        return(NULL)\n      }\n      if(length(viewTOList$zView>0)){\n        print(\"Data set is not properly well defined. Try contact the system admin, and ask about code [ERR0003]\")\n        return(NULL)\n      }\n      if(length(viewTOList$dimValMap)<=0){\n        print(\"Data set is not properly well defined. Try contact the system admin, and ask about code [ERR0004]\")\n        return(NULL)\n      }\n      \n      map <- viewTOList$dimValMap\n      newAttributes <- as.list(names(map))\n      \n      xValues <- map[xName]\n      yValues <- map[yName]\n      zValues <- map[zName]\n      \n      \n      \n      if(class(tmp)!=\"mongo.bson\"){\n        print(\"Result not defined for query.\")\n        return(NULL)\n      }\n      \n      \n      \n    }\n    \n    return(\n      \n      list(\n        getX = function(){\n          if(length(xValues)==0 && class(yAndYQueryReturn)==\"mongo.bson\"){\n            doubleList <- mongo.bson.to.list(yAndYQueryReturn)\n            doubleListX = doubleList$viewTO$xView\n            doubleListXNumeric = as.numeric(unlist(doubleListX))\n            return(doubleListXNumeric)\n          }\n          if(length(xValues)>0){\n            xValuesResult <- as.numeric(unlist(xValues))\n            return(xValuesResult)\n          }\n          \n        },\n        getY = function(){\n          if(length(yValues)==0 && class(yAndYQueryReturn)==\"mongo.bson\"){\n            doubleList <- mongo.bson.to.list(yAndYQueryReturn)\n            doubleListY = doubleList$viewTO$yView\n            doubleListYNumeric = as.numeric(unlist(doubleListY))\n            return(doubleListYNumeric)\n          }\n          if(length(yValues)>0){\n            yValuesResult <- as.numeric(unlist(yValues))\n            return(yValuesResult)\n          }\n          \n        },\n        getZ = function(){\n          if(length(zValues)==0 && class(yAndYQueryReturn)==\"mongo.bson\"){\n            doubleList <- mongo.bson.to.list(yAndYQueryReturn)\n            doubleListZ = doubleList$viewTO$zView\n            doubleListZNumeric = as.numeric(unlist(doubleListZ))\n            return(doubleListZNumeric)\n          }\n          if(length(zValues)>0){\n            zValuesResult <- as.numeric(unlist(zValues))\n            return(zValuesResult)\n          }\n          \n        }\n        \n      )\n      \n    )\n    \n  },\n  \n  \n  findAllAttributes = function(parametersSchema=parametersSchemaVar,projectName=\"TheOne\",conn=mongo){\n    buf <- mongo.bson.buffer.create()\n    mongo.bson.buffer.append(buf, \"projectName\",projectName )\n    query <- mongo.bson.from.buffer(buf)  \n    bson <- mongo.find.one(conn,parametersSchemaVar,query)\n    #makeList\n    vec <- mongo.bson.to.list(bson)$parameters\n    len <- length(vec[-1])\n    out <- suppressWarnings(as.list(rep(as.numeric(vec[1]), len)))\n    names(out) <- as.character(vec[-1])\n    return(out)\n  }\n  #,\n  #   isFindOneCacheInputValid = function(xName=NULL,yName=NULL,zName=NULL,projectName,conn,dataSetCache){\n  #     if(!mongo.is.connected(conn)){\n  #       print(\"Mongo connection is not available.\")\n  #       return(F)\n  #     }\n  #   \n  #     if(is.null(dataSetCache) || dataSetCache==\"\"){\n  #       print(\"Please, input the name of the db and table.\")\n  #       return(F)\n  #     }\n  #     \n  #     if(is.null(xName) || xName==\"\"){\n  #       print(\"Please, input the xName.\")\n  #       return(F)\n  #     }\n  #     if(is.null(yName) || yName==\"\"){\n  #       print(\"Please, input the yName\")\n  #       return(F)\n  #     }\n  # \n  #     if(is.null(projectName) || projectName==\"\"){\n  #       print(\"Please, input the projectName\")\n  #       return(F)\n  #     }\n  # \n  #     return(TRUE)\n  #   }\n  \n  \n)\n\nmongo <- mongoHelper$connect()",
    "created" : 1431214292991.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "649890017",
    "id" : "E82D4A04",
    "lastKnownWriteTime" : 1431314563,
    "path" : "~/soundwave/Q1/mongo.R",
    "project_path" : "mongo.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}